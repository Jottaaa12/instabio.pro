#!/usr/bin/env node

/**
 * Script para configurar as vari√°veis de ambiente da Ef√≠ Bank
 * 
 * USO:
 * node configurar-efi.js
 */

const { execSync } = require('child_process');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function configurarEfi() {
  console.log('üöÄ CONFIGURA√á√ÉO EFI BANK - FIREBASE FUNCTIONS');
  console.log('==============================================\n');

  try {
    // 1. Ambiente
    const sandbox = await question('Usar ambiente de HOMOLOGA√á√ÉO? (s/n): ');
    const isSandbox = sandbox.toLowerCase() === 's';

    // 2. Credenciais de Produ√ß√£o
    console.log('\nüìã CREDENCIAIS DE PRODU√á√ÉO:');
    const clientIdProd = await question('Client ID (Produ√ß√£o): ');
    const clientSecretProd = await question('Client Secret (Produ√ß√£o): ');

    // 3. Credenciais de Homologa√ß√£o
    console.log('\nüìã CREDENCIAIS DE HOMOLOGA√á√ÉO:');
    const clientIdHomolog = await question('Client ID (Homologa√ß√£o): ');
    const clientSecretHomolog = await question('Client Secret (Homologa√ß√£o): ');

    // 4. Certificado
    console.log('\nüìã CERTIFICADO P12:');
    console.log('Converta seu certificado .p12 para base64:');
    console.log('Windows: certutil -encode cert.p12 cert.txt');
    console.log('Linux/Mac: base64 -i cert.p12');
    const certBase64 = await question('Certificado em Base64: ');

    // 5. Chave PIX
    console.log('\nüìã CHAVE PIX:');
    console.log('Pode ser: CPF, CNPJ, email, telefone ou chave aleat√≥ria');
    const chavePix = await question('Chave PIX: ');

    // 6. Webhook Secret
    console.log('\nüìã WEBHOOK SECRET:');
    console.log('Senha para validar webhooks (crie uma senha forte)');
    const webhookSecret = await question('Webhook Secret: ');

    console.log('\n‚öôÔ∏è  CONFIGURANDO VARI√ÅVEIS DE AMBIENTE...\n');

    // Configura as vari√°veis
    const commands = [
      `firebase functions:secrets:set EFI_SANDBOX --data-file - <<< "${isSandbox}"`,
      `firebase functions:secrets:set EFI_CLIENT_ID_PROD --data-file - <<< "${clientIdProd}"`,
      `firebase functions:secrets:set EFI_CLIENT_SECRET_PROD --data-file - <<< "${clientSecretProd}"`,
      `firebase functions:secrets:set EFI_CLIENT_ID_HOMOLOG --data-file - <<< "${clientIdHomolog}"`,
      `firebase functions:secrets:set EFI_CLIENT_SECRET_HOMOLOG --data-file - <<< "${clientSecretHomolog}"`,
      `firebase functions:secrets:set EFI_CERT_BASE64 --data-file - <<< "${certBase64}"`,
      `firebase functions:secrets:set EFI_CHAVE_PIX --data-file - <<< "${chavePix}"`,
      `firebase functions:secrets:set EFI_WEBHOOK_SECRET --data-file - <<< "${webhookSecret}"`
    ];

    for (const command of commands) {
      console.log(`Executando: ${command.split('<<<')[0].trim()}`);
      try {
        execSync(command, { stdio: 'inherit' });
        console.log('‚úÖ Configurado com sucesso!\n');
      } catch (error) {
        console.log('‚ùå Erro na configura√ß√£o. Verifique se est√° logado no Firebase.\n');
      }
    }

    console.log('üéâ CONFIGURA√á√ÉO CONCLU√çDA!');
    console.log('\nüìù PR√ìXIMOS PASSOS:');
    console.log('1. Fa√ßa o deploy: firebase deploy --only functions');
    console.log('2. Configure o webhook: acesse a URL do configurarWebhookEfi');
    console.log('3. Teste o sistema!');

  } catch (error) {
    console.error('‚ùå Erro durante a configura√ß√£o:', error.message);
  } finally {
    rl.close();
  }
}

// Executa o script
configurarEfi(); 